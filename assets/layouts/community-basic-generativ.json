[{
	"2": {
		"fixed": false,
		"resizable": true,
		"draggable": true,
		"customDragger": false,
		"customResizer": false,
		"min": {
			"w": 1,
			"h": 1
		},
		"max": {},
		"x": 1,
		"y": 0,
		"w": 1,
		"h": 2
	},
	"3": {
		"fixed": false,
		"resizable": true,
		"draggable": true,
		"customDragger": false,
		"customResizer": false,
		"min": {
			"w": 1,
			"h": 1
		},
		"max": {},
		"x": 2,
		"y": 0,
		"w": 1,
		"h": 2
	},
	"6": {
		"fixed": false,
		"resizable": true,
		"draggable": true,
		"customDragger": false,
		"customResizer": false,
		"min": {
			"w": 1,
			"h": 1
		},
		"max": {},
		"x": 0,
		"y": 3,
		"w": 3,
		"h": 3
	},
	"8": {
		"fixed": false,
		"resizable": true,
		"draggable": true,
		"customDragger": false,
		"customResizer": false,
		"min": {
			"w": 1,
			"h": 1
		},
		"max": {},
		"x": 4,
		"y": 0,
		"w": 2,
		"h": 2,
		"id": "_mb6lswplv"
	},
	"12": {
		"fixed": false,
		"resizable": true,
		"draggable": true,
		"customDragger": false,
		"customResizer": false,
		"min": {
			"w": 1,
			"h": 1
		},
		"max": {},
		"x": 8,
		"y": 0,
		"w": 4,
		"h": 4
	},
	"id": "_dzhcjgxe3",
	"data": {
		"id": "_dzhcjgxe3",
		"type": "analyser",
		"name": "analyser_dzhcjgxe3",
		"background": "#191919",
		"lineNumbers": true,
		"hasFocus": true,
		"theme": "icecoder",
		"mode": ""
	},
	"hasFocus": false
}, {
	"2": {
		"fixed": false,
		"resizable": true,
		"draggable": true,
		"customDragger": false,
		"customResizer": false,
		"min": {
			"w": 1,
			"h": 1
		},
		"max": {},
		"x": 0,
		"y": 2,
		"w": 1,
		"h": 1
	},
	"3": {
		"fixed": false,
		"resizable": true,
		"draggable": true,
		"customDragger": false,
		"customResizer": false,
		"min": {
			"w": 1,
			"h": 1
		},
		"max": {},
		"x": 0,
		"y": 2,
		"w": 1,
		"h": 1
	},
	"6": {
		"fixed": false,
		"resizable": true,
		"draggable": true,
		"customDragger": false,
		"customResizer": false,
		"min": {
			"w": 1,
			"h": 1
		},
		"max": {},
		"x": 3,
		"y": 3,
		"w": 3,
		"h": 1
	},
	"8": {
		"fixed": false,
		"resizable": true,
		"draggable": true,
		"customDragger": false,
		"customResizer": false,
		"min": {
			"w": 1,
			"h": 1
		},
		"max": {},
		"x": 4,
		"y": 2,
		"w": 4,
		"h": 1
	},
	"12": {
		"fixed": false,
		"resizable": true,
		"draggable": true,
		"customDragger": false,
		"customResizer": false,
		"min": {
			"w": 1,
			"h": 1
		},
		"max": {},
		"x": 8,
		"y": 4,
		"w": 4,
		"h": 1
	},
	"id": "_iayssmdtg",
	"data": {
		"id": "_iayssmdtg",
		"type": "liveCodeParseOutput",
		"name": "liveCodeParseOutput_iayssmdtg",
		"background": "rgba(25, 25, 25, 0.3)",
		"lineNumbers": true,
		"hasFocus": true,
		"theme": "icecoder"
	},
	"hasFocus": false
}, {
	"2": {
		"fixed": false,
		"resizable": true,
		"draggable": true,
		"customDragger": false,
		"customResizer": false,
		"min": {
			"w": 1,
			"h": 1
		},
		"max": {},
		"x": 0,
		"y": 0,
		"w": 1,
		"h": 2
	},
	"3": {
		"fixed": false,
		"resizable": true,
		"draggable": true,
		"customDragger": false,
		"customResizer": false,
		"min": {
			"w": 1,
			"h": 1
		},
		"max": {},
		"x": 0,
		"y": 0,
		"w": 2,
		"h": 2
	},
	"6": {
		"fixed": false,
		"resizable": true,
		"draggable": true,
		"customDragger": false,
		"customResizer": false,
		"min": {
			"w": 1,
			"h": 1
		},
		"max": {},
		"x": 0,
		"y": 0,
		"w": 4,
		"h": 3
	},
	"8": {
		"fixed": false,
		"resizable": true,
		"draggable": true,
		"customDragger": false,
		"customResizer": false,
		"min": {
			"w": 1,
			"h": 1
		},
		"max": {},
		"x": 0,
		"y": 0,
		"w": 4,
		"h": 4,
		"id": "_oqjpyy12x"
	},
	"12": {
		"fixed": false,
		"resizable": true,
		"draggable": true,
		"customDragger": false,
		"customResizer": false,
		"min": {
			"w": 1,
			"h": 1
		},
		"max": {},
		"x": 0,
		"y": 0,
		"w": 8,
		"h": 5
	},
	"id": "_79u0wgntx",
	"data": {
		"id": "_79u0wgntx",
		"type": "liveCodeEditor",
		"name": "liveCodeEditor_79u0wgntx",
		"background": "#151515",
		"lineNumbers": true,
		"hasFocus": true,
		"theme": "icecoder",
		"grammarSource": "/languages/default/grammar.ne",
		"liveCodeSource": "",
		"content": ":freq:{0,{4}clt}fromJS;\n:freq2:{1,{4}clt}fromJS;\n:freq3:{2,{4}clt}fromJS;\n:freq4:{3,{4}clt}fromJS;\n:freq5:{4,{4}clt}fromJS;\n:freq6:{5,{4}clt}fromJS;\n{{4}imp, 0, {1}saw}toJS;\n:ch1:{{4}imp,:freq:}\\909b;\n:ch2:{{8}imp,:freq2:}\\909closed;\n:ch3:{{3}imp,:freq2:}\\spade;\n:ch5:{{8}imp,:freq3:}\\woodsamp;\n:ch4:{{2}imp,{10.5}pha}|drone1;\n:frequency:{{16}imp, [1,2], [:freq4:,:freq4:,:freq4:,:freq4:]}rsq;\n:res:{{16}imp, [2,2], [1,10,1,15]}rsq;\n:ch6:{:ch5:, :frequency:, :res:}lpz;\n:ch7:{{8}imp,:freq5:}\\spark;\n:ch8:{{:freq6:}sin,{{4}sqr,10,200,0.05,200}env}mul;\t \n:ch5:{{1}imp,:freq5:}\\dalispark;\n> {:ch1:, :ch2:,:ch3:,:ch4:,:ch5:,:ch6:,:ch7:,:ch8:}mix;",
		"grammar": "# Lexer [or tokenizer] definition with language lexemes [or tokens]\n@{%\n\nconst lexer = moo.compile({\n  separator:      /,/,\n  paramEnd:       /}/,\n  paramBegin:     /{/,\n  listEnd:        /\\]/,\n  listBegin:      /\\[/,\n  dacoutCh:       /\\>[0-9]+/,\n  dacout:         /\\>/,\n  variable:       /:[a-zA-Z0-9]+:/,\n  sample:         { match: /\\\\[a-zA-Z0-9]+/, lineBreaks: true, value: x => x.slice(1, x.length)},\n  slice:          { match: /\\|[a-zA-Z0-9]+/, lineBreaks: true, value: x => x.slice(1, x.length)},\n  stretch:        { match: /\\@[a-zA-Z0-9]+/, lineBreaks: true, value: x => x.slice(1, x.length)},\n  clockTrig:      /0t-?(?:[0-9]|[1-9][0-9]+)(?:\\.[0-9]+)?\\b/,\n\tnumber:         /-?(?:[0-9]|[1-9][0-9]+)(?:\\.[0-9]+)?\\b/,\n  semicolon:      /;/,\n  funcName:       /[a-zA-Z][a-zA-Z0-9]*/,\n\tstring:\t\t\t\t\t{ match: /'[a-zA-Z0-9]+'/, value: x => x.slice(1,x.length-1)},\n  comment:        /\\/\\/[^\\n]*/,\n  ws:             { match: /\\s+/, lineBreaks: true},\n});\n\n%}\n\n# Pass your lexer object using the @lexer option\n@lexer lexer\n\n# Grammar definition in the Extended Backus Naur Form (EBNF)\nmain -> _ Statement _\n{% d => ( { '@lang' : d[1] } )  %}\n\nStatement ->\n  %comment _ Statement\n  {% d => d[2] %}\n\t|\n  Expression _ %semicolon _ Statement\n  {% d => [ { '@spawn': d[0] } ].concat(d[4]) %}\n  |\n  Expression _ %semicolon (_ %comment):*\n  {% d => [ { '@spawn': d[0] } ] %}\n\n\nExpression ->\n  ParameterList _ %funcName\n  {% d => sema.synth( d[2].value, d[0]['@params'] ) %}\n  |\n  ParameterList _ %sample\n  {% d => sema.synth( 'sampler', d[0]['@params'].concat( [ sema.str( d[2].value ) ] ) ) %}\n  |\n  ParameterList _ %slice\n  {% d => sema.synth( 'slice', d[0]['@params'].concat( [ sema.str( d[2].value ) ] ) ) %}\n  |\n  ParameterList _ %stretch\n  {% d => sema.synth( 'stretch', d[0]['@params'].concat( [ sema.str( d[2].value ) ] ) ) %}\n  |\n  %variable _ Expression\n  {% d => sema.setvar( d[0].value, d[2] ) %}\n  |\n  %dacout _ Expression\n  {% d => sema.synth( 'dac', [d[2]] ) %}\n  |\n  %dacoutCh _ Expression\n  {% d => sema.synth( 'dac', [d[2], sema.num(d[0].value.substr(1))] ) %}\n\nParameterList ->\n  %paramBegin Params %paramEnd\n  {% d => ( { 'paramBegin': d[0], '@params': d[1], 'paramEnd': d[2] } ) %}\n\t|\n\t%paramBegin _ %paramEnd\n  {% d => ( { 'paramBegin': d[0], '@params': [], 'paramEnd': d[2] } ) %}\n\n\nParams ->\n  ParamElement\n  {% d => ( [ d[0] ] ) %}\n  |\n  ParamElement _ %separator _ Params\n  {% d => [ d[0] ].concat(d[4]) %}\n\nParamElement ->\n  %number\n  {% d => ( { '@num': d[0] } ) %}\n\t|\n\t%string\n  {% d => ( { '@string': d[0].value } ) %}\n  |\n  Expression\n  {% id %}\n  |\n  %variable\n  {% d => sema.getvar( d[0].value ) %}\n  |\n  %listBegin Params  %listEnd\n  {% d => ( { '@list': d[1] } )%}\n\n\n# Whitespace\n\n_  -> wschar:*\n{% function(d) {return null;} %}\n\n__ -> wschar:+\n{% function(d) {return null;} %}\n\nwschar -> %ws\n{% id %}\n"
	},
	"hasFocus": false
}, {
	"2": {
		"fixed": false,
		"resizable": true,
		"draggable": true,
		"customDragger": false,
		"customResizer": false,
		"min": {
			"w": 1,
			"h": 1
		},
		"max": {},
		"x": 1,
		"y": 2,
		"w": 1,
		"h": 2
	},
	"3": {
		"fixed": false,
		"resizable": true,
		"draggable": true,
		"customDragger": false,
		"customResizer": false,
		"min": {
			"w": 1,
			"h": 1
		},
		"max": {},
		"x": 1,
		"y": 2,
		"w": 2,
		"h": 2
	},
	"6": {
		"fixed": false,
		"resizable": true,
		"draggable": true,
		"customDragger": false,
		"customResizer": false,
		"min": {
			"w": 1,
			"h": 1
		},
		"max": {},
		"x": 0,
		"y": 6,
		"w": 4,
		"h": 3
	},
	"8": {
		"fixed": false,
		"resizable": true,
		"draggable": true,
		"customDragger": false,
		"customResizer": false,
		"min": {
			"w": 1,
			"h": 1
		},
		"max": {},
		"x": 0,
		"y": 4,
		"w": 7,
		"h": 5
	},
	"12": {
		"fixed": false,
		"resizable": true,
		"draggable": true,
		"customDragger": false,
		"customResizer": false,
		"min": {
			"w": 1,
			"h": 1
		},
		"max": {},
		"x": 0,
		"y": 5,
		"w": 8,
		"h": 5
	},
	"id": "_yx1s3o12q",
	"data": {
		"id": "_yx1s3o12q",
		"type": "modelEditor",
		"name": "modelEditor_yx1s3o12q",
		"background": "#151515",
		"lineNumbers": true,
		"hasFocus": true,
		"theme": "monokai",
		"content": "var channel0 = createOutputChannel(0, 1);\nvar channel1 = createOutputChannel(1, 1);\nvar channel2 = createOutputChannel(2, 1);\nvar channel3 = createOutputChannel(3, 1);\nvar channel4 = createOutputChannel(4, 1);\nvar channel5 = createOutputChannel(5, 1);\n____\nchannel0.send(200)\nvar tick=0;\ninput = (id,x) => {\n    console.log(id, x);\n\tvar freq=2;\n\tif(tick%2==1)freq=1;\n\telse {\n\t\tfreq=5;\n\tif(Math.random()>.5)freq=0;\n\t}\n\tchannel0.send(freq);\n\tvar freq2=Math.random()*5;\t\n\tif(Math.random()>.75)freq2=0;\n\tchannel1.send(freq2);\n\tvar r=Math.random();\t\n\tif(r>.75)freq3=3;\n\telse \tif(r>.5)freq3=2;\n\telse \tif(r>.25)freq3=1;\n\telse freq3=0;\n\tchannel2.send(freq3);\n\tvar freq4=0;\n\tr=Math.random();\t\n\tif(r>.75)freq4=5000;\n\telse \tif(r>.5)freq4=2000;\n\telse \tif(r>.25)freq4=1000;\n\telse freq4=0;\n\tchannel3.send(freq4);\n\tvar r=Math.random();\t\n\tif(r>.75)freq3=3;\n\telse \tif(r>.5)freq3=2;\n\telse \tif(r>.25)freq3=1;\n\telse freq3=0;\n\tchannel4.send(freq3);\n\tvar freq5=0;\n\tr=Math.random();\t\n\tif(r>.75)freq5=500;\n\telse \tif(r>.5)freq5=200;\n\telse \tif(r>.25)freq5=100;\n\telse freq5=0;\n\tchannel5.send(freq5);\n\tconsole.log(tick);\n\ttick+=1;\n\tif(tick==16)tick=0;\n};"
	},
	"hasFocus": true
}]