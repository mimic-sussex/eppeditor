[{"2":{"fixed":false,"resizable":true,"draggable":true,"customDragger":false,"customResizer":false,"min":{"w":1,"h":1},"max":{},"x":1,"y":0,"w":1,"h":1},"3":{"fixed":false,"resizable":true,"draggable":true,"customDragger":false,"customResizer":false,"min":{"w":1,"h":1},"max":{},"x":2,"y":0,"w":1,"h":1},"6":{"fixed":false,"resizable":true,"draggable":true,"customDragger":false,"customResizer":false,"min":{"w":1,"h":1},"max":{},"x":0,"y":3,"w":3,"h":1},"8":{"fixed":false,"resizable":true,"draggable":true,"customDragger":false,"customResizer":false,"min":{"w":1,"h":1},"max":{},"x":0,"y":0,"w":3,"h":1,"id":"_flyl6gr4k"},"12":{"fixed":false,"resizable":true,"draggable":true,"customDragger":false,"customResizer":false,"min":{"w":1,"h":1},"max":{},"x":8,"y":0,"w":4,"h":1},"id":"_n4tt998dt","data":{"id":"_n4tt998dt","type":"liveCodeParseOutput","name":"liveCodeParseOutput_n4tt998dt","background":"rgba(25, 25, 25, 0.3)","lineNumbers":true,"hasFocus":true,"theme":"icecoder"},"hasFocus":false},{"2":{"fixed":false,"resizable":true,"draggable":true,"customDragger":false,"customResizer":false,"min":{"w":1,"h":1},"max":{},"x":0,"y":2,"w":1,"h":2},"3":{"fixed":false,"resizable":true,"draggable":true,"customDragger":false,"customResizer":false,"min":{"w":1,"h":1},"max":{},"x":2,"y":1,"w":1,"h":2},"6":{"fixed":false,"resizable":true,"draggable":true,"customDragger":false,"customResizer":false,"min":{"w":1,"h":1},"max":{},"x":0,"y":7,"w":3,"h":3},"8":{"fixed":false,"resizable":true,"draggable":true,"customDragger":false,"customResizer":false,"min":{"w":1,"h":1},"max":{},"x":3,"y":0,"w":2,"h":1,"id":"_issrlv7mb"},"12":{"fixed":false,"resizable":true,"draggable":true,"customDragger":false,"customResizer":false,"min":{"w":1,"h":1},"max":{},"x":8,"y":1,"w":4,"h":4},"id":"_oezuq1q4m","data":{"id":"_oezuq1q4m","type":"analyser","name":"analyser_oezuq1q4m","background":"#191919","lineNumbers":true,"hasFocus":true,"theme":"icecoder","mode":""},"hasFocus":false},{"2":{"fixed":false,"resizable":true,"draggable":true,"customDragger":false,"customResizer":false,"min":{"w":1,"h":1},"max":{},"x":0,"y":0,"w":1,"h":2},"3":{"fixed":false,"resizable":true,"draggable":true,"customDragger":false,"customResizer":false,"min":{"w":1,"h":1},"max":{},"x":0,"y":0,"w":2,"h":2},"6":{"fixed":false,"resizable":true,"draggable":true,"customDragger":false,"customResizer":false,"min":{"w":1,"h":1},"max":{},"x":0,"y":0,"w":4,"h":3},"8":{"fixed":false,"resizable":true,"draggable":true,"customDragger":false,"customResizer":false,"min":{"w":1,"h":1},"max":{},"x":0,"y":1,"w":5,"h":3,"id":"_yl3vcf88z"},"12":{"fixed":false,"resizable":true,"draggable":true,"customDragger":false,"customResizer":false,"min":{"w":1,"h":1},"max":{},"x":0,"y":0,"w":8,"h":5},"id":"_zjgb9e1q9","data":{"id":"_zjgb9e1q9","type":"liveCodeEditor","name":"liveCodeEditor_zjgb9e1q9","background":"#151515","lineNumbers":true,"hasFocus":true,"theme":"icecoder","grammarSource":"/languages/default/grammar.ne","liveCodeSource":"","content":"{60,4}clk;\n{{1}clt, 0, {1}saw}toJS;\n:line:{0}fromJS;\n:osc0:{{277.18}tri,{{:line:,17}at,3000,5,0.95,100}env}mul;\n:osc1:{{311.13}tri,{{:line:,18}at,3000,5,0.95,100}env}mul;\n:osc2:{{369.99}tri,{{:line:,19}at,3000,5,0.95,100}env}mul;\n:osc3:{{415.30}tri,{{:line:,20}at,3000,5,0.95,100}env}mul;\n:osc4:{{466.16}tri,{{:line:,21}at,3000,5,0.95,100}env}mul;\n:osc5:{{554.37}tri,{{:line:,22}at,3000,5,0.95,100}env}mul;\n:osc6:{{622.25}tri,{{:line:,23}at,3000,5,0.95,100}env}mul;\n:osc7:{{739.99}tri,{{:line:,24}at,3000,5,0.95,100}env}mul;\n>{:osc0:, :osc1:, :osc2:, :osc3:, :osc4:, :osc5:, :osc6:, :osc7:}mix;","grammar":"# Lexer [or tokenizer] definition with language lexemes [or tokens]\n@{%\n\nconst lexer = moo.compile({\n  separator:      /,/,\n  paramEnd:       /}/,\n  paramBegin:     /{/,\n  listEnd:        /\\]/,\n  listBegin:      /\\[/,\n  dacoutCh:       /\\>[0-9]+/,\n  dacout:         /\\>/,\n  variable:       /:[a-zA-Z0-9]+:/,\n  sample:         { match: /\\\\[a-zA-Z0-9]+/, lineBreaks: true, value: x => x.slice(1, x.length)},\n  slice:          { match: /\\|[a-zA-Z0-9]+/, lineBreaks: true, value: x => x.slice(1, x.length)},\n  stretch:        { match: /\\@[a-zA-Z0-9]+/, lineBreaks: true, value: x => x.slice(1, x.length)},\n  clockTrig:      /0t-?(?:[0-9]|[1-9][0-9]+)(?:\\.[0-9]+)?\\b/,\n\tnumber:         /-?(?:[0-9]|[1-9][0-9]+)(?:\\.[0-9]+)?\\b/,\n  semicolon:      /;/,\n  funcName:       /[a-zA-Z][a-zA-Z0-9]*/,\n\tstring:\t\t\t\t\t{ match: /'[a-zA-Z0-9]+'/, value: x => x.slice(1,x.length-1)},\n  comment:        /\\/\\/[^\\n]*/,\n  ws:             { match: /\\s+/, lineBreaks: true},\n});\n\n%}\n\n# Pass your lexer object using the @lexer option\n@lexer lexer\n\n# Grammar definition in the Extended Backus Naur Form (EBNF)\nmain -> _ Statement _\n{% d => ( { '@lang' : d[1] } )  %}\n\nStatement ->\n  %comment _ Statement\n  {% d => d[2] %}\n\t|\n  Expression _ %semicolon _ Statement\n  {% d => [ { '@spawn': d[0] } ].concat(d[4]) %}\n  |\n  Expression _ %semicolon (_ %comment):*\n  {% d => [ { '@spawn': d[0] } ] %}\n\n\nExpression ->\n  ParameterList _ %funcName\n  {% d => sema.synth( d[2].value, d[0]['@params'] ) %}\n  |\n  ParameterList _ %sample\n  {% d => sema.synth( 'sampler', d[0]['@params'].concat( [ sema.str( d[2].value ) ] ) ) %}\n  |\n  ParameterList _ %slice\n  {% d => sema.synth( 'slice', d[0]['@params'].concat( [ sema.str( d[2].value ) ] ) ) %}\n  |\n  ParameterList _ %stretch\n  {% d => sema.synth( 'stretch', d[0]['@params'].concat( [ sema.str( d[2].value ) ] ) ) %}\n  |\n  %variable _ Expression\n  {% d => sema.setvar( d[0].value, d[2] ) %}\n  |\n  %dacout _ Expression\n  {% d => sema.synth( 'dac', [d[2]] ) %}\n  |\n  %dacoutCh _ Expression\n  {% d => sema.synth( 'dac', [d[2], sema.num(d[0].value.substr(1))] ) %}\n\nParameterList ->\n  %paramBegin Params %paramEnd\n  {% d => ( { 'paramBegin': d[0], '@params': d[1], 'paramEnd': d[2] } ) %}\n\t|\n\t%paramBegin _ %paramEnd\n  {% d => ( { 'paramBegin': d[0], '@params': [], 'paramEnd': d[2] } ) %}\n\n\nParams ->\n  ParamElement\n  {% d => ( [ d[0] ] ) %}\n  |\n  ParamElement _ %separator _ Params\n  {% d => [ d[0] ].concat(d[4]) %}\n\nParamElement ->\n  %number\n  {% d => ( { '@num': d[0] } ) %}\n\t|\n\t%string\n  {% d => ( { '@string': d[0].value } ) %}\n  |\n  Expression\n  {% id %}\n  |\n  %variable\n  {% d => sema.getvar( d[0].value ) %}\n  |\n  %listBegin Params  %listEnd\n  {% d => ( { '@list': d[1] } )%}\n\n\n# Whitespace\n\n_  -> wschar:*\n{% function(d) {return null;} %}\n\n__ -> wschar:+\n{% function(d) {return null;} %}\n\nwschar -> %ws\n{% id %}\n"},"hasFocus":true},{"2":{"fixed":false,"resizable":true,"draggable":true,"customDragger":false,"customResizer":false,"min":{"w":1,"h":1},"max":{},"x":1,"y":1,"w":1,"h":2},"3":{"fixed":false,"resizable":true,"draggable":true,"customDragger":false,"customResizer":false,"min":{"w":1,"h":1},"max":{},"x":0,"y":2,"w":2,"h":2},"6":{"fixed":false,"resizable":true,"draggable":true,"customDragger":false,"customResizer":false,"min":{"w":1,"h":1},"max":{},"x":0,"y":4,"w":4,"h":3},"8":{"fixed":false,"resizable":true,"draggable":true,"customDragger":false,"customResizer":false,"min":{"w":1,"h":1},"max":{},"x":0,"y":4,"w":6,"h":5,"id":"_19a71z4mw"},"12":{"fixed":false,"resizable":true,"draggable":true,"customDragger":false,"customResizer":false,"min":{"w":1,"h":1},"max":{},"x":0,"y":5,"w":8,"h":5},"id":"_19a71z4mw","data":{"id":"_19a71z4mw","type":"modelEditor","name":"modelEditor_19a71z4mw","background":"#151515","lineNumbers":true,"hasFocus":true,"theme":"monokai","content":"//Rule 30 cellular automaton\n//Number of cells\nvar NUMCELLS = 32;\nvar line = [];\nvar nextline = [];\n//Init all cells to 0\nfor (x = 0; x < NUMCELLS; x++) {\n    line.push(0);\n    nextline.push(0);\n}\n//Seed the automaton\nline[NUMCELLS / 2] = 1;\n//Compute next generation\nfunction generation() {\n    for (x = 1; x < NUMCELLS - 1; x++) {\n        nextline[x] = line[x - 1] ^ (line[x] || line[x + 1]);\n    }\n    nextline[0] = line[NUMCELLS - 1] ^ (line[0] || line[1]);\n    nextline[NUMCELLS - 1] = line[NUMCELLS - 2] ^ (line[NUMCELLS - 1] || line[0]);\n    line = [].concat(nextline);\n}\n//Open a channel to send the pattern back\nvar toLC = createOutputChannel(0, NUMCELLS);\ninput = (id, x) => {\n    step();\n    console.log(line);\n    toLC.send(line);\n};"},"hasFocus":false}]