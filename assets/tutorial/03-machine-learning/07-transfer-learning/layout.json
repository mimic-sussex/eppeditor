[
	{
		"2": {
			"drag": {
				"dragging": false,
				"top": 0,
				"left": 0
			},
			"resize": {
				"resizing": false,
				"width": 0,
				"height": 0
			},
			"responsive": {
				"valueW": 2
			},
			"min": {},
			"max": {},
			"x": 0,
			"y": 0,
			"w": 1,
			"h": 3
		},
		"3": {
			"drag": {
				"dragging": false,
				"top": 0,
				"left": 0
			},
			"resize": {
				"resizing": false,
				"width": 0,
				"height": 0
			},
			"responsive": {
				"valueW": 2
			},
			"min": {},
			"max": {},
			"x": 0,
			"y": 0,
			"w": 2,
			"h": 3
		},
		"6": {
			"drag": {
				"dragging": false,
				"top": 0,
				"left": 0
			},
			"resize": {
				"resizing": false,
				"width": 0,
				"height": 0
			},
			"responsive": {
				"valueW": 2
			},
			"min": {},
			"max": {},
			"x": 0,
			"y": 0,
			"w": 4,
			"h": 3
		},
		"8": {
			"drag": {
				"dragging": false,
				"top": 0,
				"left": 0
			},
			"resize": {
				"resizing": false,
				"width": 0,
				"height": 0
			},
			"responsive": {
				"valueW": 2
			},
			"min": {},
			"max": {},
			"x": 0,
			"y": 0,
			"w": 6,
			"h": 3
		},
		"12": {
			"drag": {
				"dragging": false,
				"top": 0,
				"left": 0
			},
			"resize": {
				"resizing": false,
				"width": 0,
				"height": 0
			},
			"responsive": {
				"valueW": 2
			},
			"min": {},
			"max": {},
			"x": 0,
			"y": 0,
			"w": 10,
			"h": 3
		},
		"id": "_8v9vdibrl",
		"data": {
			"id": "_8v9vdibrl",
			"type": "liveCodeEditor",
			"name": "hello-world_y2pqvmh6b_myyx0w13z_5ygcr56yf_6b3c4x6qe_8v9vdib3l",
			"background": "#151515",
			"lineNumbers": true,
			"hasFocus": false,
			"theme": "icecoder",
			"content": "{120, 4}clk;\n{1}quantise;\n\n:m:{1}fromJS;\n:seq:{{15}clp, [1], :m:}rsq;\n:tune:{:seq:}saw;\n>{{:tune:,0.08}mul}mix;\n",
			"grammarSource": "/languages/default/grammar.ne",
			"liveCodeSource": "/languages/default/code.sem",
			"grammar": "# GRAMMAR EDITOR\n\n# Lexer [or tokenizer] definition with language lexemes [or tokens]\n@{%\n\nconst lexer = moo.compile({\n  separator:      /,/,\n  paramEnd:       /}/,\n  paramBegin:     /{/,\n  listEnd:        /\\]/,\n  listBegin:      /\\[/,\n  dacoutCh:       /\\>[0-9]+/,\n  dacout:         /\\>/,\n  variable:       /:[a-zA-Z0-9]+:/,\n  sample:         { match: /\\\\[a-zA-Z0-9]+/, lineBreaks: true, value: x => x.slice(1, x.length)},\n  slice:          { match: /\\|[a-zA-Z0-9]+/, lineBreaks: true, value: x => x.slice(1, x.length)},\n  stretch:        { match: /\\@[a-zA-Z0-9]+/, lineBreaks: true, value: x => x.slice(1, x.length)},\n  clockTrig:      /0t-?(?:[0-9]|[1-9][0-9]+)(?:\\.[0-9]+)?\\b/,\n\tnumber:         /-?(?:[0-9]|[1-9][0-9]+)(?:\\.[0-9]+)?\\b/,\n  semicolon:      /;/,\n  funcName:       /[a-zA-Z][a-zA-Z0-9]*/,\n\tstring:\t\t\t\t\t{ match: /'[a-zA-Z0-9]+'/, value: x => x.slice(1,x.length-1)},\n  comment:        /\\/\\/[^\\n]*/,\n  ws:             { match: /\\s+/, lineBreaks: true},\n});\n\n%}\n\n# Pass your lexer object using the @lexer option\n@lexer lexer\n\n# Grammar definition in the Extended Backus Naur Form (EBNF)\nmain -> _ Statement _\n{% d => ( { '@lang' : d[1] } )  %}\n\nStatement ->\n  %comment _ Statement\n  {% d => d[2] %}\n\t|\n  Expression _ %semicolon _ Statement\n  {% d => [ { '@spawn': d[0] } ].concat(d[4]) %}\n  |\n  Expression _ %semicolon (_ %comment):*\n  {% d => [ { '@spawn': d[0] } ] %}\n\n\nExpression ->\n  ParameterList _ %funcName\n  {% d => sema.synth( d[2].value, d[0]['@params'] ) %}\n  |\n  ParameterList _ %sample\n  {% d => sema.synth( 'sampler', d[0]['@params'].concat( [ sema.str( d[2].value ) ] ) ) %}\n  |\n  ParameterList _ %slice\n  {% d => sema.synth( 'slice', d[0]['@params'].concat( [ sema.str( d[2].value ) ] ) ) %}\n  |\n  ParameterList _ %stretch\n  {% d => sema.synth( 'stretch', d[0]['@params'].concat( [ sema.str( d[2].value ) ] ) ) %}\n  |\n  %variable _ Expression\n  {% d => sema.setvar( d[0].value, d[2] ) %}\n  |\n  %dacout _ Expression\n  {% d => sema.synth( 'dac', [d[2]] ) %}\n  |\n  %dacoutCh _ Expression\n  {% d => sema.synth( 'dac', [d[2], sema.num(d[0].value.substr(1))] ) %}\n\nParameterList ->\n  %paramBegin Params %paramEnd\n  {% d => ( { 'paramBegin': d[0], '@params': d[1], 'paramEnd': d[2] } ) %}\n\t|\n\t%paramBegin _ %paramEnd\n  {% d => ( { 'paramBegin': d[0], '@params': [], 'paramEnd': d[2] } ) %}\n\n\nParams ->\n  ParamElement\n  {% d => ( [ d[0] ] ) %}\n  |\n  ParamElement _ %separator _ Params\n  {% d => [ d[0] ].concat(d[4]) %}\n\nParamElement ->\n  %number\n  {% d => ( { '@num': d[0] } ) %}\n\t|\n\t%string\n  {% d => ( { '@string': d[0].value } ) %}\n  |\n  Expression\n  {% id %}\n  |\n  %variable\n  {% d => sema.getvar( d[0].value ) %}\n  |\n  %listBegin Params  %listEnd\n  {% d => ( { '@list': d[1] } )%}\n\n\n# Whitespace\n\n_  -> wschar:*\n{% function(d) {return null;} %}\n\n__ -> wschar:+\n{% function(d) {return null;} %}\n\nwschar -> %ws\n{% id %}\n"
		}
	},
	{
		"2": {
			"drag": {
				"dragging": false,
				"top": 0,
				"left": 0
			},
			"resize": {
				"resizing": false,
				"width": 0,
				"height": 0
			},
			"responsive": {
				"valueW": 0
			},
			"resizable": true,
			"draggable": true,
			"min": {},
			"max": {},
			"x": 1,
			"y": 0,
			"w": 1,
			"h": 1
		},
		"3": {
			"drag": {
				"dragging": false,
				"top": 0,
				"left": 0
			},
			"resize": {
				"resizing": false,
				"width": 0,
				"height": 0
			},
			"responsive": {
				"valueW": 0
			},
			"min": {},
			"max": {},
			"x": 2,
			"y": 0,
			"w": 1,
			"h": 1
		},
		"6": {
			"drag": {
				"dragging": false,
				"top": 0,
				"left": 0
			},
			"resize": {
				"resizing": false,
				"width": 0,
				"height": 0
			},
			"responsive": {
				"valueW": 0
			},
			"min": {},
			"max": {},
			"x": 5,
			"y": 0,
			"w": 2,
			"h": 1
		},
		"8": {
			"drag": {
				"dragging": false,
				"top": 0,
				"left": 0
			},
			"resize": {
				"resizing": false,
				"width": 0,
				"height": 0
			},
			"responsive": {
				"valueW": 0
			},
			"min": {},
			"max": {},
			"x": 6,
			"y": 0,
			"w": 2,
			"h": 2
		},
		"12": {
			"drag": {
				"dragging": false,
				"top": 0,
				"left": 0
			},
			"resize": {
				"resizing": false,
				"width": 0,
				"height": 0
			},
			"responsive": {
				"valueW": 0
			},
			"min": {},
			"max": {},
			"x": 10,
			"y": 0,
			"w": 2,
			"h": 1
		},
		"id": "_524vjn8kn",
		"data": {
			"name": "hello world_au1enazhs_iwu2mp3lh_6l092dg1c_nx9yneq25_524vjn8kn",
			"id": "_524vjn8kn",
			"type": "analyser",
			"hasFocus": false,
			"theme": "monokai",
			"background": "#f0f0f0",
			"mode": "both"
		}
	},
	{
		"2": {
			"drag": {
				"top": null,
				"left": null,
				"dragging": false
			},
			"resize": {
				"width": null,
				"height": null,
				"resizing": false
			},
			"responsive": {
				"valueW": 0
			},
			"min": {},
			"max": {},
			"x": 1,
			"y": 1,
			"w": 1,
			"h": 2
		},
		"3": {
			"drag": {
				"top": null,
				"left": null,
				"dragging": false
			},
			"resize": {
				"width": null,
				"height": null,
				"resizing": false
			},
			"responsive": {
				"valueW": 0
			},
			"min": {},
			"max": {},
			"x": 2,
			"y": 1,
			"w": 1,
			"h": 2
		},
		"6": {
			"drag": {
				"top": null,
				"left": null,
				"dragging": false
			},
			"resize": {
				"width": null,
				"height": null,
				"resizing": false
			},
			"responsive": {
				"valueW": 0
			},
			"min": {},
			"max": {},
			"x": 5,
			"y": 1,
			"w": 2,
			"h": 2
		},
		"8": {
			"drag": {
				"top": null,
				"left": null,
				"dragging": false
			},
			"resize": {
				"width": null,
				"height": null,
				"resizing": false
			},
			"responsive": {
				"valueW": 0
			},
			"min": {},
			"max": {},
			"x": 6,
			"y": 1,
			"w": 2,
			"h": 2
		},
		"12": {
			"drag": {
				"top": null,
				"left": null,
				"dragging": false
			},
			"resize": {
				"width": null,
				"height": null,
				"resizing": false
			},
			"responsive": {
				"valueW": 0
			},
			"min": {},
			"max": {},
			"x": 10,
			"y": 1,
			"w": 2,
			"h": 2
		},
		"data": {
			"name": "hello world_1z19h81ii_zj92yxxn0",
			"type": "liveCodeParseOutput",
			"lineNumbers": false,
			"hasFocus": false,
			"theme": "shadowfox",
			"background": "rgba(25, 25, 25, 0.3)",
			"content": ""
		},
		"id": "_zj92yxxn0"
	},
	{
		"2": {
			"drag": {
				"dragging": false,
				"top": 0,
				"left": 0
			},
			"resize": {
				"resizing": false,
				"width": 0,
				"height": 0
			},
			"responsive": {
				"valueW": 2
			},
			"min": {},
			"max": {},
			"x": 0,
			"y": 3,
			"w": 1,
			"h": 3
		},
		"3": {
			"drag": {
				"dragging": false,
				"top": 0,
				"left": 0
			},
			"resize": {
				"resizing": false,
				"width": 0,
				"height": 0
			},
			"responsive": {
				"valueW": 2
			},
			"min": {},
			"max": {},
			"x": 0,
			"y": 3,
			"w": 2,
			"h": 3
		},
		"6": {
			"drag": {
				"dragging": false,
				"top": 0,
				"left": 0
			},
			"resize": {
				"resizing": false,
				"width": 0,
				"height": 0
			},
			"responsive": {
				"valueW": 2
			},
			"min": {},
			"max": {},
			"x": 0,
			"y": 3,
			"w": 4,
			"h": 3
		},
		"8": {
			"drag": {
				"dragging": false,
				"top": 0,
				"left": 0
			},
			"resize": {
				"resizing": false,
				"width": 0,
				"height": 0
			},
			"responsive": {
				"valueW": 2
			},
			"min": {},
			"max": {},
			"x": 0,
			"y": 3,
			"w": 6,
			"h": 3
		},
		"12": {
			"drag": {
				"dragging": false,
				"top": 0,
				"left": 0
			},
			"resize": {
				"resizing": false,
				"width": 0,
				"height": 0
			},
			"responsive": {
				"valueW": 2
			},
			"min": {},
			"max": {},
			"x": 0,
			"y": 3,
			"w": 10,
			"h": 3
		},
		"data": {
			"name": "hello world_1z19h81ii_zj92yxxn0",
			"type": "modelEditor",
			"hasFocus": false,
			"theme": "shadowfox",
			"content": "//EXECUTE THESE SCRIPTS TO IMPORT TENSOR FLOW AND MAGENTA LIBRARIES\n\nimportScripts(\"https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@1.4.0/dist/tf.min.js\");\nimportScripts(\"https://cdn.jsdelivr.net/npm/@magenta/music@^1.12.0/es6/core.js\");\nimportScripts(\"https://cdn.jsdelivr.net/npm/@magenta/music@^1.12.0/es6/music_rnn.js\");\n___ \n\n// CREATE A CHANNEL TO THE AUDIO ENGINE\nvar channel0 = createOutputChannel(1, 12);\n\n// MIDI TO FREQUENCY AUXILIARY FUNCTIONS\nvar mtof = m => Math.pow(2, (m - 69) / 12) * 440;\n\nvar ftom = f => Math.round(12*Math.log2(f/440) + 69);\n___\n\n// DEFINE A NOTE SEQUENCE \"Piano Phase\" Steve Reich \nvar noteSeq = {\n  notes: [\n    {pitch: 73, startTime: 0.0, endTime: 0.5},\n    {pitch: 75, startTime: 0.5, endTime: 1.0},\n    {pitch: 80, startTime: 1.0, endTime: 1.5},\n    {pitch: 82, startTime: 1.5, endTime: 2.0},\n    {pitch: 83, startTime: 2.0, endTime: 2.5},\n    {pitch: 75, startTime: 2.5, endTime: 3.0},\n    {pitch: 73, startTime: 3.0, endTime: 4.0},\n    {pitch: 82, startTime: 4.0, endTime: 4.5},\n    {pitch: 80, startTime: 4.5, endTime: 5.0},\n    {pitch: 75, startTime: 5.0, endTime: 5.5},\n    {pitch: 83, startTime: 5.5, endTime: 6.0},\n    {pitch: 82, startTime: 6.0, endTime: 6.5}\n  ],\n  totalTime: 12\n};\n\n// FETCH AND INITIALIZE A MAGENTA PRE-TRAINED RNN MODEL\nvar music_rnn = new music_rnn.MusicRNN('https://storage.googleapis.com/magentadata/js/checkpoints/music_rnn/basic_rnn')\n\nmusic_rnn.initialize()\n___\n\n// SEND ORIGINAL NOTE SEQUENCE TO PLAY IN THE ENGINE \nconst orignalNotes = noteSeq.notes.map(d => mtof(d.pitch))  \nconsole.log(orignalNotes);\nchannel0.send(orignalNotes);\n___\n\n\n// RNN CONTINUES SEQUENCE IN THE STYLE OF ORIGINAL NOTE SEQUENCE\n(() => {\n\t\n\t//quantize note sequence (stepsPerQuarter 4)\n\tconst qns = core.sequences.quantizeNoteSequence(noteSeq, 4)\n\t//length of response for continuation of the melody.\n\tlet rnnSteps = 12;\n\t//distance to original melody\n\t//temperature directly proportional to randomness\n\tlet rnnTemperature = 1000\n\t\n\tmusic_rnn\n\t.continueSequence(qns, rnnSteps, rnnTemperature)\n\t.then( sample => {\n\t\tconst notes = sample.notes.map(d => mtof(d.pitch));\n\t\tchannel0.send(notes);\n\t\tconsole.log(notes);\t\n\t});\n})();\n___",
			"background": "rgba(25, 25, 25, 0.3)",
			"id": "_zj92yxwn0"
		},
		"id": "_zj92yxwn0"
	},
	{
		"2": {
			"drag": {
				"top": null,
				"left": null,
				"dragging": false
			},
			"resize": {
				"width": null,
				"height": null,
				"resizing": false
			},
			"responsive": {
				"valueW": 0
			},
			"min": {},
			"max": {},
			"x": 1,
			"y": 3,
			"w": 1,
			"h": 3
		},
		"3": {
			"drag": {
				"top": null,
				"left": null,
				"dragging": false
			},
			"resize": {
				"width": null,
				"height": null,
				"resizing": false
			},
			"responsive": {
				"valueW": 0
			},
			"min": {},
			"max": {},
			"x": 2,
			"y": 3,
			"w": 1,
			"h": 3
		},
		"6": {
			"drag": {
				"top": null,
				"left": null,
				"dragging": false
			},
			"resize": {
				"width": null,
				"height": null,
				"resizing": false
			},
			"responsive": {
				"valueW": 0
			},
			"min": {},
			"max": {},
			"x": 5,
			"y": 3,
			"w": 2,
			"h": 3
		},
		"8": {
			"drag": {
				"top": null,
				"left": null,
				"dragging": false
			},
			"resize": {
				"width": null,
				"height": null,
				"resizing": false
			},
			"responsive": {
				"valueW": 0
			},
			"min": {},
			"max": {},
			"x": 6,
			"y": 3,
			"w": 2,
			"h": 3
		},
		"12": {
			"drag": {
				"top": null,
				"left": null,
				"dragging": false
			},
			"resize": {
				"width": null,
				"height": null,
				"resizing": false
			},
			"responsive": {
				"valueW": 0
			},
			"min": {},
			"max": {},
			"x": 10,
			"y": 3,
			"w": 2,
			"h": 3
		},
		"id": "_um7tsn65i",
		"data": {
			"id": "_um7tsn65i",
			"type": "console",
			"name": "console_um7tsn65i",
			"background": "rgba(20, 20, 20, 0.3)",
			"lineNumbers": true,
			"hasFocus": true,
			"theme": "icecoder"
		},
		"hasFocus": false
	}
]
